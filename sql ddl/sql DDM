--워크북 4 DDL
------------------------------------------------------1.
create table tb_category(
        name varchar2(10),
        use_YN char(1) default 'Y'

);
select *
from user_tab_cols
where table_name = 'TB_CATEGORY';

--제약조건 검색
select constraint_name,
            uc.table_name,
            ucc.column_name,
            uc.constraint_type,
            uc.search_condition
from user_constraints uc
    join user_cons_columns ucc
        using(constraint_name)
where uc.table_name = 'TB_CATEGORY';
----------------------------------------------------------2.
create table tb_class_type(
        no varchar2(5),
        name varchar2(10),
        constraint pk_tb_class_type_no primary key(no)
);
select *
from user_tab_cols
where table_name = 'TB_CLASS_TYPE';

------------------------------------------------------------3

alter table tb_category
add constraints pk_tb_catagory_name primary key(name);

-----------------------------------------------------------4
select constraint_name,
            uc.table_name,
            ucc.column_name,
            uc.constraint_type,
            uc.search_condition
from user_constraints uc
    join user_cons_columns ucc
        using(constraint_name)
where uc.table_name = 'TB_CLASS_TYPE';--제약조건 확인

alter table tb_class_type 
modify  name varchar2(10) not null;

------------------------------------------------------------------------------------5.
alter table tb_category
add no varchar2(10); --no가 없어서 추가

alter table tb_category
modify name varchar2(20);-- 수정

select *
from user_tab_cols
where table_name = 'TB_CATEGORY'; --확인

alter table tb_class_type
modify name varchar2(20); --수정

alter table tb_class_type
modify no varchar2(10);--수정

select *
from user_tab_cols
where table_name = 'TB_CLASS_TYPE'; --확인

---------------------------------------------------------------------------------6.
alter table tb_category
rename column no to category_no;

alter table tb_category
rename column name to category_name;

select *
from user_tab_cols
where table_name = 'TB_CATEGORY';--확인

alter table tb_class_type
rename column no to class_type_no;

alter table tb_class_type
rename column name to class_type_name;

select *
from user_tab_cols
where table_name = 'TB_CLASS_TYPE'; --확인

---------------------------------------------------------------------------------7.

select constraint_name,
            uc.table_name,
            ucc.column_name,
            uc.constraint_type,
            uc.search_condition
from user_constraints uc
    join user_cons_columns ucc
        using(constraint_name)
where uc.table_name = 'TB_CATEGORY'; --확인


alter table tb_category
rename constraint pk_tb_catagory_name to PK_CATEGORY_NAME; --수정

select constraint_name,
            uc.table_name,
            ucc.column_name,
            uc.constraint_type,
            uc.search_condition
from user_constraints uc
    join user_cons_columns ucc
        using(constraint_name)
where uc.table_name = 'TB_CLASS_TYPE';

alter table tb_class_type
rename constraint pk_tb_class_type_no to PK_CLASS_TYPE_NO; --수정

---------------------------------------------------------------------------------8.

insert into TB_CATEGORY(category_name, use_yn)
values('공학','Y');
insert into TB_CATEGORY(category_name, use_yn)
values('자연과학','Y');
insert into TB_CATEGORY(category_name, use_yn)
values('의학','Y');
insert into TB_CATEGORY(category_name, use_yn)
values('예체능','Y');
insert into TB_CATEGORY(category_name, use_yn)
values('인문사회','Y');


COMMIT;
select * from tb_category;


---------------------------------------------------------------------------------9.

select constraint_name,
            uc.table_name,
            ucc.column_name,
            uc.constraint_type,
            uc.search_condition
from user_constraints uc
    join user_cons_columns ucc
        using(constraint_name)
where uc.table_name = 'TB_DEPARTMENT';--확인


alter table tb_department
add constraints fk_department_category foreign key (category)
                                                                            references tb_category(category_name);

---------------------------------------------------------------------------------10.

create view vw_학생일반정보
as
select student_no,
          student_name,
          student_address
from tb_student;

 --grant create view to chun; system 계정에 추가한 읽기전용권한 허용
select *
from vw_학생일반정보;--확인용
---------------------------------------------------------------------------------11.

create view vw_지도면담
as
select s.student_name,
            d.department_name,
           nvl(p.professor_name, '미지정')
from tb_student S right join tb_department D
     using(department_no)
     left join tb_professor P
     on s.coach_professor_no =p.professor_no;

select *
from vw_지도면담;


---------------------------------------------------------------------------------12.
create view vw_학과별학생수
as
select decode(grouping( DEPARTMENT_NAME),0 ,nvl( DEPARTMENT_NAME,'미지정'),1,'합계')  DEPARTMENT_NAME,
            count(*) STUDENT_COUNT
from tb_department D left join tb_student s
            using(department_no)
            group by rollup( DEPARTMENT_NAME);
            
select *
from vw_학과별학생수;

---------------------------------------------------------------------------------13.

select *
from vw_학생일반정보
where student_no = 'A213046';--학생 이름 확인용

update vw_학생일반정보
set student_name = '정문주'
where student_no = 'A213046';

---------------------------------------------------------------------------------14.
create or replace view vw_학생일반정보
as
select student_no 학번,
          student_name 학생이름,
          student_address 주소
from tb_student
with read only; --dml방지

select *
from vw_학생일반정보;

---------------------------------------------------------------------------------15.
select class_no 과목번호,
            (select class_name 
            from tb_class
            where class_no = G.class_no) 과목이름,
            count(class_no)
from tb_grade G
where g.term_no like'2009%' or g.term_no like'2008%' or g.term_no like'2007%'
group by rollup(class_no);


--최근3년 2009, 2008, 2007
SELECT 년도
FROM (
    SELECT DISTINCT SUBSTR(TERM_NO, 1, 4) 년도
    FROM TB_GRADE
    ORDER BY 1 DESC
    )
WHERE ROWNUM <= 3;

SELECT *
FROM (
    SELECT CLASS_NO 과목번호, CLASS_NAME 과목이름, COUNT(STUDENT_NO) "누적수강생수(명)"
    FROM TB_CLASS 
        LEFT JOIN TB_GRADE  USING (CLASS_NO)
    WHERE SUBSTR(TERM_NO, 1, 4) IN (SELECT 년도
                                  FROM (SELECT DISTINCT SUBSTR(TERM_NO, 1, 4) 년도
                                            FROM TB_GRADE
                                            ORDER BY 1 DESC)
                                  WHERE ROWNUM <= 5)
    GROUP BY CLASS_NO, CLASS_NAME
    ORDER BY 3 DESC)
WHERE ROWNUM <= 5; --동점인 애들을 다같이 불러내려면 window함수를 사용하거나 rank를 사용하라

---------------------------------------------------------------------------------------------------------------------------------------


-------------DML-------------------------------------------1.
insert into TB_CLASS_TYPE
values(01,'전공필수');

insert into TB_CLASS_TYPE
values(02,'전공선택');
 
 insert into TB_CLASS_TYPE
values(03,'교양필수');

insert into TB_CLASS_TYPE
values(04,'교양선택');

insert into TB_CLASS_TYPE
values(05,'논문지도');

select * from TB_CLASS_TYPE;

--------------------------------------------------------------------------------------2.
create table tb_학생일반정보
as
select STUDENT_NO,student_name,STUDENT_ADDRESS
from tb_student;

select * from tb_학생일반정보; --확인용
--------------------------------------------------------------------------------------3.

create table tb_국어국문학과
as
select s.student_no 학번,
          s.student_name 학생이름,
         decode(substr(s.student_ssn, 8,1), '1',1900,'2',1900,2000) + substr(s.student_ssn,1,2) 출생년도,
         nvl((select professor_name
            from tb_professor
            where professor_no = s.coach_professor_no
            ),'미지정') 지도교수이름
from tb_student s 
where s.department_no ='001';

select * from  tb_국어국문학과; --확인

commit;
--------------------------------------------------------------------------------------4.
update tb_department
set capacity = trunc(capacity + capacity*0.1 ); 
rollback;
select * from  tb_department;--확인용
--------------------------------------------------------------------------------------5.
update tb_student
set student_address ='서울시 종로구 숭인동 181-21'
where student_no = 'A413042';

select * from tb_student
where student_no = 'A413042'; --확인용

--------------------------------------------------------------------------------------6.

update tb_student 
set student_ssn = substr(student_ssn,1,6);

select * from tb_student; --확인용
--------------------------------------------------------------------------------------7.
update tb_grade
set point =3.5
where student_no in ( select student_no
                                        from tb_student
                                        where student_name ='김명훈') and 
                                             class_no in (select class_no
                                                                    from tb_class
                                                                    where class_name = '피부생리학') and  TERM_NO = '200501';

select g.point
from tb_grade G left join tb_student S
        using(student_no)
        right join tb_class C
        using(class_no)
where s.student_name ='김명훈' and c.class_name = '피부생리학' ;

select point
from tb_grade 
where student_no in ( select student_no
                                        from tb_student
                                        where student_name ='김명훈') and 
                                             class_no in (select class_no
                                                                    from tb_class
                                                                    where class_name = '피부생리학') and  TERM_NO = '200501';
         
--------------------------------------------------------------------------------------8.         

delete 
from tb_grade 
where student_no in ( select student_no
                                        from tb_student
                                        where absence_yn = 'Y');
                                        
                                       select * from tb_grade; --확인용
